from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from loguru import logger
from services.solana_service import SolanaService
from services.jupiter_service import JupiterService
from solana.publickey import PublicKey
import asyncio
import time
from datetime import datetime
from services.firebase_service import FirebaseService
from config import SOLANA_TOKEN_ADDRESSES
from utils import log_transaction, validate_slippage

router = Router()
solana_service = SolanaService()
jupiter_service = JupiterService()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
class WithdrawStates(StatesGroup):
    waiting_for_token = State()        # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞
    waiting_for_address = State()      # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    waiting_for_amount = State()       # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
    confirming_withdrawal = State()    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∏—Ö —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ)
token_prices_cache = {}
last_price_update = 0
CACHE_DURATION = 300  # 5 –º–∏–Ω—É—Ç

async def get_token_prices():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ Jupiter API"""
    global token_prices_cache, last_price_update
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
    current_time = time.time()
    if current_time - last_price_update > CACHE_DURATION or not token_prices_cache:
        try:
            # TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Jupiter API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω
            # –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
            token_prices_cache = {
                'SOL': 124.46,
                'BONK': 0.00001263,
                'RAY': 1.839,
                'USDC': 1.0,
                'USDT': 1.0
            }
            last_price_update = current_time
            logger.info("–¶–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ
            if not token_prices_cache:
                token_prices_cache = {
                    'SOL': 124.46,
                    'BONK': 0.00001263,
                    'RAY': 1.839,
                    'USDC': 1.0,
                    'USDT': 1.0
                }
    
    return token_prices_cache

async def get_user_wallet(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase"""
    logger.info(f"[get_user_wallet] –ó–∞–ø—Ä–æ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è user_id: {user_id}")
    try:
        wallet = await solana_service.wallet_service.get_wallet(user_id)
        if not wallet:
            logger.warning(f"[get_user_wallet] –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user_id: {user_id}")
            return None, None
        logger.info(f"[get_user_wallet] –ö–æ—à–µ–ª–µ–∫ –Ω–∞–π–¥–µ–Ω –¥–ª—è user_id: {user_id}, public_key: {wallet['public_key']}")
        return wallet['public_key'], wallet['private_key']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞: {e}")
        return None, None

def create_token_keyboard(balances):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–æ–∫–µ–Ω–∞–º–∏
    token_buttons = []
    for token, balance in balances.items():
        if balance > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω—ã —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
            token_buttons.append(InlineKeyboardButton(
                text=f"{token}",
                callback_data=f"withdraw_token:{token}"
            ))
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(token_buttons), 3):
        keyboard.append(token_buttons[i:i+3])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.append([
        InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="withdraw_back"),
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="withdraw_refresh")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def cmd_withdraw_with_user_id(message: types.Message, state: FSMContext, user_id: int):
    logger.info(f"[cmd_withdraw_with_user_id] –ó–∞–ø—É—Å–∫ –≤—ã–≤–æ–¥–∞ –¥–ª—è user_id: {user_id}")
    try:
        user_pubkey, _ = await get_user_wallet(user_id)
        if not user_pubkey:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è."
            )
            return
        balances = await solana_service.get_all_balances(user_pubkey)
        if not balances:
            await message.answer(
                "‚ùå –ù–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞."
            )
            return
        token_prices = await get_token_prices()
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞ (Solana) 1/1\n\n"
        for token, balance in balances.items():
            price = token_prices.get(token, 0)
            usd_value = balance * price
            text += f"{token} ‚Äî ${usd_value:.2f} ‚Äî –¶–µ–Ω–∞: ${price}\n"
        keyboard = create_token_keyboard(balances)
        await message.answer(text, reply_markup=keyboard)
        await state.set_state(WithdrawStates.waiting_for_token)
        await state.update_data(balances=balances)
    except Exception as e:
        logger.error(f"Error in withdraw command for user {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("withdraw"))
async def cmd_withdraw(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await cmd_withdraw_with_user_id(message, state, user_id)

@router.callback_query(F.data.startswith("withdraw_token:"), WithdrawStates.waiting_for_token)
async def process_token_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    user_id = callback.from_user.id
    token = callback.data.split(":", 1)[1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        balances = data.get("balances", {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –µ—Å—Ç—å –≤ –±–∞–ª–∞–Ω—Å–∞—Ö
        if token not in balances:
            await callback.answer("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ.", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(selected_token=token, token_balance=balances[token])
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω —Ç–æ–∫–µ–Ω: {token}\n"
            f"–ë–∞–ª–∞–Ω—Å: {balances[token]} {token}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Solana –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="withdraw_back_to_tokens")]
            ])
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        await state.set_state(WithdrawStates.waiting_for_address)
        
    except Exception as e:
        logger.error(f"Error processing token selection for user {user_id}: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data == "withdraw_back_to_tokens")
async def back_to_tokens(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–æ–∫–µ–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        balances = data.get("balances", {})
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤
        token_prices = await get_token_prices()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –∏ USD —Ü–µ–Ω–∞–º–∏
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞ (Solana) 1/1\n\n"
        
        for token, balance in balances.items():
            price = token_prices.get(token, 0)
            usd_value = balance * price
            text += f"{token} ‚Äî ${usd_value:.2f} ‚Äî –¶–µ–Ω–∞: ${price}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–∫–µ–Ω–∞–º–∏
        keyboard = create_token_keyboard(balances)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(text, reply_markup=keyboard)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞
        await state.set_state(WithdrawStates.waiting_for_token)
        
    except Exception as e:
        logger.error(f"Error returning to token selection: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /withdraw")
        await state.clear()

@router.callback_query(F.data == "withdraw_refresh")
async def refresh_balances(callback: CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤"""
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_pubkey, _ = await get_user_wallet(user_id)
        
        if not user_pubkey:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞.", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤
        balances = await solana_service.get_all_balances(user_pubkey)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ (—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à)
        global last_price_update
        last_price_update = 0
        token_prices = await get_token_prices()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞ (Solana) 1/1\n\n"
        
        for token, balance in balances.items():
            price = token_prices.get(token, 0)
            usd_value = balance * price
            text += f"{token} ‚Äî ${usd_value:.2f} ‚Äî –¶–µ–Ω–∞: ${price}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–∫–µ–Ω–∞–º–∏
        keyboard = create_token_keyboard(balances)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(text, reply_markup=keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(balances=balances)
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer("‚úÖ –ë–∞–ª–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"Error refreshing balances for user {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤", show_alert=True)

@router.message(WithdrawStates.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    address = message.text.strip()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ Solana
        try:
            PublicKey(address)
            valid_address = True
        except:
            valid_address = False
        
        if not valid_address:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å Solana. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        token = data.get("selected_token")
        balance = data.get("token_balance", 0)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(recipient_address=address)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞
        await message.answer(
            f"–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: `{address}`\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {token} –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∞–∫—Å–∏–º—É–º {balance}):",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="withdraw_back_to_tokens")]
            ])
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã
        await state.set_state(WithdrawStates.waiting_for_amount)
        
    except Exception as e:
        logger.error(f"Error processing address for user {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(WithdrawStates.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    user_id = message.from_user.id
    amount_text = message.text.strip()
    
    try:
        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
        try:
            amount = float(amount_text)
        except:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        token = data.get("selected_token")
        balance = data.get("token_balance", 0)
        recipient_address = data.get("recipient_address")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return
        
        if amount > balance:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {balance} {token}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(amount=amount)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞
        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="withdraw_confirm"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="withdraw_cancel")
            ]
        ])
        
        await message.answer(
            f"üì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n\n"
            f"–¢–æ–∫–µ–Ω: {token}\n"
            f"–°—É–º–º–∞: {amount} {token}\n"
            f"–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: `{recipient_address}`\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥.",
            parse_mode="Markdown",
            reply_markup=confirm_keyboard
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
        await state.set_state(WithdrawStates.confirming_withdrawal)
        
    except Exception as e:
        logger.error(f"Error processing amount for user {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data.startswith("withdraw_confirm"))
async def confirm_withdrawal(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    user_id = callback.from_user.id
    
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        await callback.message.edit_text(
            "‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        token = data.get("selected_token")
        amount = data.get("amount")
        recipient_address = data.get("recipient_address")
        
        if not all([token, amount, recipient_address]):
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_pubkey, user_privkey = await get_user_wallet(user_id)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞
        if token == "SOL":
            tx_signature = await solana_service.send_sol(
                from_private_key=user_privkey,
                to_address=recipient_address,
                amount=amount
            )
        else:
            token_address = SOLANA_TOKEN_ADDRESSES.get(token)
            if not token_address:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω: {token}")
                
            # –Ø–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º amount –∫ float –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞
            tx_signature = await solana_service.send_spl_token(
                from_private_key=user_privkey,
                to_address=str(recipient_address),
                token_mint=str(token_address),
                amount=float(amount)
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        tx_url = f"https://solscan.io/tx/{tx_signature}"
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        log_transaction(
            user_id=user_id,
            tx_type="withdraw",
            token=token,
            amount=amount,
            status="success",
            tx_signature=tx_signature
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await callback.message.edit_text(
            f"‚úÖ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n"
            f"–¢–æ–∫–µ–Ω: {token}\n"
            f"–°—É–º–º–∞: {amount}\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_address}\n"
            f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {tx_url}"
        )
        
    except Exception as e:
        error_msg = str(e)
        logger.error(f"Error in withdrawal confirmation for user {user_id}: {error_msg}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        log_transaction(
            user_id=user_id,
            tx_type="withdraw",
            token=token if 'token' in locals() else 'unknown',
            amount=amount if 'amount' in locals() else 0,
            status="error",
            error=error_msg
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤: {error_msg}"
        )
    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

@router.callback_query(F.data == "withdraw_cancel")
async def cancel_withdrawal(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    await callback.answer()
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

@router.callback_query(F.data == "withdraw_back")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear() 