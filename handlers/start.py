from aiogram import Router, types, F
from aiogram.filters import Command
from loguru import logger
from services.firebase_service import FirebaseService
from services.solana_service import SolanaService
from services.price_service import PriceService
from services.wallet import WalletService
from solana.keypair import Keypair
from base58 import b58encode
from keyboards.inline import get_main_keyboard
import json

router = Router(name='start')
firebase = FirebaseService()
solana = SolanaService()
price_service = PriceService()
wallet_service = WalletService()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.from_user.id
        logger.info(f"User {user_id} started the bot")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –≤ Firebase
        wallet_data = await wallet_service.get_wallet(user_id)
        
        if not wallet_data:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ WalletService, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ —à–∏—Ñ—Ä—É–µ—Ç –∫–ª—é—á–∏
            wallet_data = await wallet_service.create_wallet(user_id)
            logger.info(f"Created new wallet for user {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å SOL
        sol_balance = await solana.get_sol_balance(wallet_data['public_key'])
        sol_price_usd = await price_service.get_sol_price()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        tokens = await solana.get_wallet_tokens(wallet_data['public_key'])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            f"üëá –í–∞—à –∫–æ—à–µ–ª–µ–∫:\n"
            f"`{wallet_data['public_key']}`\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å—ã:\n"
        )
        usd_value = float(sol_balance) * sol_price_usd
        text += f"- SOL: {sol_balance} (~${usd_value:.2f})\n"

        # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º mint-–∞–¥—Ä–µ—Å–∞ —Å —Ç–∏–∫–µ—Ä–∞–º–∏ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        from config import SOLANA_TOKEN_ADDRESSES
        mint_to_ticker = {v: k for k, v in SOLANA_TOKEN_ADDRESSES.items()}
        for mint, raw_amount in tokens.items():
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º decimals
            balance = await solana.get_token_balance(wallet_data['public_key'], mint)
            ticker = mint_to_ticker.get(mint, mint[:6])
            text += f"- {ticker}: {balance}\n"

        text += "\n–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –±–æ—Ç–∞."

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_main_keyboard()

        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        logger.info(f"Welcome message sent to user {user_id}")
        
    except Exception as e:
        error_msg = f"Error in start handler: {str(e)}"
        logger.error(error_msg)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
