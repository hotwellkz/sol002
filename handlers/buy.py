from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from loguru import logger
from services.jupiter_service import JupiterService
from services.firebase_service import FirebaseService
from config import SOLANA_RPC_URL, SOLANA_TOKEN_ADDRESSES
from utils import log_transaction

router = Router()
jupiter = JupiterService()
firebase = FirebaseService()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
@router.message(F.text == "/cancel")
async def cmd_cancel(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    await state.clear()
    await message.answer("‚úÖ –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

class BuyStates(StatesGroup):
    waiting_for_token = State()
    waiting_for_amount = State()

async def get_user_wallet(user_id: int) -> tuple[str, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase
    
    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        tuple: (public_key, private_key)
        
    Raises:
        Exception: –ï—Å–ª–∏ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    """
    try:
        wallet_data = await firebase.get_user_wallet(user_id)
        if not wallet_data:
            raise Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
        public_key = wallet_data.get('public_key')
        private_key = wallet_data.get('private_key')
        
        if not public_key or not private_key:
            raise Exception("–ö–ª—é—á–∏ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        return public_key, private_key
        
    except Exception as e:
        logger.error(f"Error getting user wallet: {str(e)}")
        raise

@router.message(Command("buy"))
async def cmd_buy(message: Message, state: FSMContext):
    current_state = await state.get_state()
    from loguru import logger
    logger.info(f"[cmd_buy] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {current_state}")
    await state.set_state(BuyStates.waiting_for_token)
    new_state = await state.get_state()
    logger.info(f"[cmd_buy] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {new_state}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏")

@router.message(BuyStates.waiting_for_token)
async def process_token(message: Message, state: FSMContext):
    from loguru import logger
    current_state = await state.get_state()
    logger.info(f"[process_token] –í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_token. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}, —Ç–µ–∫—Å—Ç: '{message.text}'")
    token_input = message.text.strip()
    
    # –í—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞: {token_input}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    if token_input.startswith('/'):
        logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {token_input}")
        command = token_input.split(' ')[0].lower()
        await state.clear()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º '–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.' —Ç–æ–ª—å–∫–æ –¥–ª—è /cancel
        if command == '/cancel':
            await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
        if command == '/balance':
            logger.info("üîç –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /balance")
            from handlers.balance import cmd_balance
            await cmd_balance(message, state)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –∫—É–ø–∏—Ç—å SOL —Å –ø–æ–º–æ—â—å—é SOL
    if token_input.upper() == 'SOL' or token_input == 'So11111111111111111111111111111111111111112':
        logger.info("üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –∫—É–ø–∏—Ç—å SOL –∏—Å–ø–æ–ª—å–∑—É—è SOL")
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å SOL –∏—Å–ø–æ–ª—å–∑—É—è SOL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    normalized_input = token_input.replace(' ', '').upper()
    token_address = None
    for symbol, address in SOLANA_TOKEN_ADDRESSES.items():
        if normalized_input == symbol.replace(' ', '').upper():
            token_address = address
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}: {token_address}")
            break
    if not token_address:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for symbol, address in SOLANA_TOKEN_ADDRESSES.items():
            if normalized_input in symbol.replace(' ', '').upper():
                token_address = address
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: —Å–∏–º–≤–æ–ª {symbol}, –∞–¥—Ä–µ—Å {address}")
                break
    if not token_address:
        token_address = token_input
        logger.info(f"üîç –ù–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: {token_address}")
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
    if token_address == token_input:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ –µ–≥–æ —Å–∏–º–≤–æ–ª—É
        found = False
        for symbol, address in SOLANA_TOKEN_ADDRESSES.items():
            if token_input.upper() in symbol:
                token_address = address
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: —Å–∏–º–≤–æ–ª {symbol}, –∞–¥—Ä–µ—Å {address}")
                found = True
                break
        if not found:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–µ–¥–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö ‚Äî –∏—â–µ–º —á–µ—Ä–µ–∑ Jupiter API
            try:
                tokens_list = await jupiter.get_all_tokens()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ Jupiter: {str(e)}")
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Å Jupiter API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            # –ë–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª—É
            normalized_input = token_input.replace(' ', '').upper()
            matches = [
                t for t in tokens_list
                if isinstance(t, dict) and t.get('symbol', '').replace(' ', '').upper() == normalized_input
            ]
            if matches:
                token_data = matches[0]
                logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {token_data}")
                token_address = (
                    token_data.get('address') or
                    token_data.get('mintAddress') or
                    token_data.get('mint')
                )
                if not token_address:
                    logger.error(f"–¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç address/mintAddress/mint: {token_data}")
                    await message.answer(f"‚ùå –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Jupiter, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ mint-–∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é.")
                    return
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Jupiter API: {token_address}")
            # --- –í–ê–ñ–ù–û ---
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ‚Äî –ù–ï –¥–µ–ª–∞–µ–º return, –∞ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
            # –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–∫–µ–Ω–∞
            # (–æ—à–∏–±–∫—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é)
        logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: {token_address}")

    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –Ω–µ –∞–¥—Ä–µ—Å SOL
    if token_address == 'So11111111111111111111111111111111111111112':
        logger.info("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–¥—Ä–µ—Å SOL")
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å SOL –∏—Å–ø–æ–ª—å–∑—É—è SOL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω.")
        return
    
    import re
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞/–∞–¥—Ä–µ—Å–∞
    if not re.match(r'^[A-Za-z0-9]{3,44}$', token_input):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤, 3-44 —Å–∏–º–≤–æ–ª–∞).")
        return
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å SOL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
        user_sol_balance = 1.0
        
        logger.info(f"üîç –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {token_address}")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è 1 SOL
            route = await jupiter.get_best_route(
                input_mint="So11111111111111111111111111111111111111112",  # SOL
                output_mint=token_address,
                amount=1000000000,  # 1 SOL
                slippage=10.0
            )

            # --- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–∫–µ–Ω–∞ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ ---
            route_exists = route and route.get('outAmount')
            try:
                decimals = await jupiter.get_token_decimals(token_address)
            except Exception:
                decimals = 6  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if route_exists:
                out_amount_raw = float(route.get('outAmount', 0))
                out_amount = out_amount_raw / (10 ** decimals)
                price_impact = float(route.get('priceImpactPct', 0))
                swap_usd_value = route.get('swapUsdValue')
                try:
                    swap_usd_value = float(swap_usd_value)
                except Exception:
                    swap_usd_value = None
            else:
                out_amount = 0.0
                price_impact = 0.0
                swap_usd_value = None
            market_name = route.get('marketName') if route_exists else token_input.upper()
            if not market_name or market_name.lower() == 'unknown':
                market_name = token_input.upper()
            token_info = f"–ö—É–ø–∏—Ç—å ${token_input.upper()} ‚Äî ({market_name})\n"
            token_info += f"{token_address}\n\n"
            token_info += f"–ë–∞–ª–∞–Ω—Å: {user_sol_balance} SOL\n"
            if route_exists:
                token_info += f"Price: {out_amount:.6f} {token_input.upper()} –∑–∞ 1 SOL\n"
            else:
                token_info += f"Price: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
            if swap_usd_value:
                token_info += f"–û–±—ä–µ–º —Å–¥–µ–ª–∫–∏: ${swap_usd_value:,.2f}\n"
            else:
                token_info += f"–û–±—ä–µ–º —Å–¥–µ–ª–∫–∏: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
            token_info += "LIQ: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
            token_info += "MC: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
            token_info += "–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω ‚úÖ\n\n"
            if route_exists:
                token_info += f"1 SOL ‚áÑ {out_amount:.6f} {token_input.upper()}\n"
                token_info += f"–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É: {price_impact:.2f}%"
            else:
                token_info += f"1 SOL ‚áÑ ? {token_input.upper()}\n"
                token_info += f"–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            # –ö–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ (—Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ–∫—É–ø–∫–∏)
            amounts_sol = [0.01, 0.1, 0.5, 1]
            token_buttons = []
            for sol_amt in amounts_sol:
                token_amt = out_amount * sol_amt if route_exists else 0.0
                token_amt_str = f"{token_amt:.6f}".rstrip('0').rstrip('.') if route_exists else f"?"
                token_buttons.append(
                    InlineKeyboardButton(
                        text=f"–ö—É–ø–∏—Ç—å {token_amt_str} {token_input.upper()}",
                        callback_data=f"buy_{sol_amt}_{token_address}"
                    )
                )
            buy_rows = [token_buttons[:2], token_buttons[2:]]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="buy_back"),
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"buy_refresh_{token_address}")
                ],
                buy_rows[0],
                buy_rows[1],
                [
                    InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å X {token_input.upper()}", callback_data=f"buy_custom_{token_address}")
                ]
            ])
            await state.update_data(token_address=token_address)
            await message.answer(token_info, reply_markup=keyboard)

            
        except Exception as route_error:
            logger.error(f"üîç –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {str(route_error)}")
            # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–∫–µ–Ω–∞ –¥–∞–∂–µ –µ—Å–ª–∏ Jupiter API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É ---
            route_exists = False
            try:
                decimals = await jupiter.get_token_decimals(token_address)
            except Exception:
                decimals = 6
            out_amount = 0.0
            price_impact = 0.0
            swap_usd_value = None
            market_name = token_input.upper()
            token_info = f"–ö—É–ø–∏—Ç—å ${token_input.upper()} ‚Äî ({market_name})\n"
            token_info += f"{token_address}\n\n"
            token_info += f"–ë–∞–ª–∞–Ω—Å: {user_sol_balance} SOL\n"
            token_info += f"Price: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
            token_info += f"–û–±—ä–µ–º —Å–¥–µ–ª–∫–∏: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
            token_info += "LIQ: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
            token_info += "MC: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
            token_info += "–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω ‚úÖ\n\n"
            token_info += f"1 SOL ‚áÑ ? {token_input.upper()}\n"
            token_info += f"–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            amounts_sol = [0.01, 0.1, 0.5, 1]
            token_buttons = []
            for sol_amt in amounts_sol:
                token_amt_str = f"?"
                token_buttons.append(
                    InlineKeyboardButton(
                        text=f"–ö—É–ø–∏—Ç—å {token_amt_str} {token_input.upper()}",
                        callback_data=f"buy_{sol_amt}_{token_address}"
                    )
                )
            buy_rows = [token_buttons[:2], token_buttons[2:]]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="buy_back"),
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"buy_refresh_{token_address}")
                ],
                buy_rows[0],
                buy_rows[1],
                [
                    InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å X {token_input.upper()}", callback_data=f"buy_custom_{token_address}")
                ]
            ])
            await state.update_data(token_address=token_address)
            await message.answer(token_info, reply_markup=keyboard)
            # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
        
    except Exception as e:
        logger.error(f"[CRITICAL] –û—à–∏–±–∫–∞ –≤ process_token: {str(e)}", exc_info=True)
        try:
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω.\n\n–î–µ—Ç–∞–ª–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {str(e)}")
        except Exception as send_error:
            logger.error(f"[CRITICAL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {send_error}")
        # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑

@router.callback_query(F.data.startswith("buy_"))
async def process_buy_callback(callback: CallbackQuery, state: FSMContext):
    # –°–†–ê–ó–£ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å TelegramBadRequest
    try:
        await callback.answer()
    except Exception:
        pass  # –ï—Å–ª–∏ —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

    action, *params = callback.data.split("_")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è 'custom' –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –∫ params[-1]
    if len(params) > 0:
        token_address = params[-1]
    else:
        token_address = None
    
    if callback.data.startswith("buy_back"):
        await state.clear()
        await callback.message.delete()
        return
        
    if callback.data.startswith("buy_refresh_"):
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        await process_token(callback.message, state)
        return
        
    if callback.data.startswith("buy_custom_"):
        await state.set_state(BuyStates.waiting_for_amount)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(token_address=token_address)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –¥–ª—è –ø–æ–∫—É–ø–∫–∏:")
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏
    try:
        amount = float(params[0])
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è
        if amount <= 0:
            await callback.message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É.")
            return
        
        await callback.message.answer(f"‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ {amount} SOL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase
        user_pubkey, user_privkey = await get_user_wallet(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–æ–ø
        route = await jupiter.get_best_route(
            input_mint="So11111111111111111111111111111111111111112",
            output_mint=token_address,
            amount=int(amount * 1000000000),
            slippage=10.0
        )
        
        tx_url = await jupiter.execute_swap(
            user_pubkey=user_pubkey,
            user_privkey=user_privkey,
            route=route
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –æ—à–∏–±–∫—É
        if tx_url.startswith("‚ùå –û—à–∏–±–∫–∞"):
            error_msg = tx_url.replace("‚ùå –û—à–∏–±–∫–∞: ", "")
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            log_transaction(
                user_id=user_id,
                tx_type="buy",
                token=token_address,
                amount=amount,
                status="error",
                error=error_msg
            )
            await callback.message.answer(tx_url)
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ URL
            tx_signature = tx_url.split('/')[-1]
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            log_transaction(
                user_id=user_id,
                tx_type="buy",
                token=token_address,
                amount=amount,
                status="success",
                tx_signature=tx_signature
            )
            
            await callback.message.answer(
                f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount} SOL\n"
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {tx_url}"
            )
            
    except Exception as e:
        error_msg = str(e)
        logger.error(f"Error processing buy: {error_msg}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        log_transaction(
            user_id=callback.from_user.id,
            tx_type="buy",
            token=token_address,
            amount=amount if 'amount' in locals() else 0,
            status="error",
            error=error_msg
        )
        
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏: {error_msg}")
    finally:
        await state.clear()

@router.message(BuyStates.waiting_for_amount)
async def process_custom_amount(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
        data = await state.get_data()
        token_address = data.get('token_address')
        user_id = message.from_user.id
        
        if not token_address:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
            
        try:
            amount = float(message.text)
            if amount <= 0:
                await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
            return
            
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É –Ω–∞–ø—Ä—è–º—É—é
        await message.answer(f"‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ {amount} SOL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase
        user_pubkey, user_privkey = await get_user_wallet(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–æ–ø
        route = await jupiter.get_best_route(
            input_mint="So11111111111111111111111111111111111111112",
            output_mint=token_address,
            amount=int(amount * 1000000000),
            slippage=10.0
        )
        
        tx_url = await jupiter.execute_swap(
            user_pubkey=user_pubkey,
            user_privkey=user_privkey,
            route=route
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if tx_url.startswith("‚ùå –û—à–∏–±–∫–∞"):
            error_msg = tx_url.replace("‚ùå –û—à–∏–±–∫–∞: ", "")
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            log_transaction(
                user_id=user_id,
                tx_type="buy",
                token=token_address,
                amount=amount,
                status="error",
                error=error_msg
            )
            await message.answer(tx_url)
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ URL
            tx_signature = tx_url.split('/')[-1]
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            log_transaction(
                user_id=user_id,
                tx_type="buy",
                token=token_address,
                amount=amount,
                status="success",
                tx_signature=tx_signature
            )
            
            await message.answer(
                f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount} SOL\n"
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {tx_url}"
            )
            
    except Exception as e:
        error_msg = str(e)
        logger.error(f"Error processing custom amount: {error_msg}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        log_transaction(
            user_id=message.from_user.id,
            tx_type="buy",
            token=token_address if 'token_address' in locals() else 'unknown',
            amount=amount if 'amount' in locals() else 0,
            status="error",
            error=error_msg
        )
        
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏: {error_msg}")
    finally:
        await state.clear() 