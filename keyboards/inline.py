from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F, Router
from aiogram.types import CallbackQuery
from loguru import logger
import decimal
from services.firebase_service import FirebaseService
from services.solana_service import SolanaService
from services.price_service import PriceService

router = Router(name='inline_kb')
firebase = FirebaseService()
solana = SolanaService()
price_service = PriceService()

def get_main_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    buttons = [
        [
            InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data="buy"),
            InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å", callback_data="sell")
        ],
        [
            InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"),
            InlineKeyboardButton(text="–≠–∫—Å–ø–æ—Ä—Ç –∫–ª—é—á–µ–π", callback_data="export_keys")
        ],
        [
            InlineKeyboardButton(text="–ë–∞–ª–∞–Ω—Å", callback_data="balance"),
            InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

from aiogram.fsm.context import FSMContext
from handlers.buy import BuyStates

@router.callback_query(F.data == "buy")
async def process_buy_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö—É–ø–∏—Ç—å"""
    await state.set_state(BuyStates.waiting_for_token)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
    await callback.answer()

def get_tokens_keyboard(tokens: list) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –≤ 2 –∫–æ–ª–æ–Ω–∫–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ '–û–±–Ω–æ–≤–∏—Ç—å', '–ù–∞–∑–∞–¥'.
    tokens: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤–∏–¥–∞ {"symbol": str, "amount": float, "usd": float}
    """
    buttons = []
    row = []
    for idx, token in enumerate(tokens):
        btn = InlineKeyboardButton(
            text=f"{token['symbol']}",
            callback_data=f"sell_token_{token['symbol']}"
        )
        row.append(btn)
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons.append([
        InlineKeyboardButton(text="‚ü≥ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="sell_refresh"),
        InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="sell_back")
    ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

class SellStates(StatesGroup):
    waiting_for_percent = State()


@router.callback_query(F.data.startswith("sell_percent_custom_"))
async def sell_custom_percent_callback(callback: CallbackQuery, state: FSMContext):
    token_symbol = callback.data.replace("sell_percent_custom_", "")
    # –î–æ–±–∞–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="sell_cancel_custom_percent")]
    ])
    await callback.message.answer(
        f"<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100</b>\n–≠—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–ª–∞–Ω—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –¥–ª—è <b>{token_symbol}</b>.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(SellStates.waiting_for_percent)
    await state.update_data(token_symbol=token_symbol)
    await callback.answer()

@router.message(SellStates.waiting_for_percent)
async def process_custom_percent(message: Message, state: FSMContext):
    text = message.text.strip().replace('%', '')
    if not text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
        return
    percent = int(text)
    if not (1 <= percent <= 100):
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
        return
    data = await state.get_data()
    token_symbol = data.get("token_symbol")
    user_id = message.from_user.id
    wallet = await firebase.get_user_wallet(user_id)
    if not wallet:
        await message.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
        await state.clear()
        return
    from config import SOLANA_TOKEN_ADDRESSES
    address = SOLANA_TOKEN_ADDRESSES.get(token_symbol, token_symbol)
    amount = await solana.get_token_balance(wallet['public_key'], address)
    if not amount or amount == 0:
        await message.answer("‚ùå –ù–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
        await state.clear()
        return
    sell_amount = amount * percent / 100
    msg = await message.answer(f"‚è≥ –ü—Ä–æ–≤–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–æ–¥–∞–∂–∏ {sell_amount:.6f} {token_symbol} ({percent}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)...")
    from config import SOLANA_TOKEN_ADDRESSES
    from services.jupiter_service import JupiterService
    jupiter_service = JupiterService()
    address = SOLANA_TOKEN_ADDRESSES.get(token_symbol, token_symbol)
    try:
        tx_result = await jupiter_service.execute_sell(
            user_pubkey=wallet['public_key'],
            user_privkey=wallet['private_key'],
            token_address=address,
            amount=sell_amount
        )
        solscan_url = None
        tx_status = ""
        if isinstance(tx_result, str) and tx_result.startswith("https://solscan.io/tx/"):
            solscan_url = tx_result
            tx_status = "üü¢ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
        elif isinstance(tx_result, str):
            tx_status = f"üî¥ –û—à–∏–±–∫–∞: {tx_result}"
        else:
            tx_status = f"üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {tx_result}"
        sol_price_usd = await price_service.get_sol_price()
        price = await price_service.get_token_price_jupiter(address, jupiter_service, sol_price_usd)
        sol_amount = None
        if price:
            sol_amount = sell_amount * price / sol_price_usd
        text_lines = [
            f"<b>–ü—Ä–æ–¥–∞–∂–∞ {sell_amount:.6f} {token_symbol}</b>"
        ]
        if price:
            text_lines.append(f"–¶–µ–Ω–∞: <b>${price:.4f}</b> –∑–∞ 1 {token_symbol}")
        else:
            text_lines.append("–¶–µ–Ω–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        if sol_amount:
            text_lines.append(f"–ü–æ–ª—É—á–µ–Ω–æ: <b>{sol_amount:.6f} SOL</b> (~${sol_amount * sol_price_usd:.2f})")
        text_lines.append(tx_status)
        if solscan_url:
            text_lines.append(f'<a href="{solscan_url}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Solscan</a>')
        text = "\n".join(text_lines)
        buttons = [
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="sell")],
        ]
        if solscan_url:
            buttons.append([InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Solscan", url=solscan_url)])
        buttons.append([InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å", callback_data=f"sell_token_{token_symbol}")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await msg.edit_text(text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {str(e)}")
    await state.clear()

@router.callback_query(F.data == "sell_cancel_custom_percent")
async def cancel_custom_percent(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –í–≤–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω.")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("sell_percent_"))
async def process_sell_percent_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ 25%, 50%, 75%, 100% –∏ –ü—Ä–æ–¥–∞—Ç—å X% –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–∞."""
    user_id = callback.from_user.id
    try:
        import re
        # –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º wallet –∏ address –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        wallet = await firebase.get_user_wallet(user_id)
        if not wallet:
            await callback.message.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
            return
        from config import SOLANA_TOKEN_ADDRESSES
        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: sell_percent_100_SYMBOL:—Ç–æ—á–Ω—ã–π_–±–∞–ª–∞–Ω—Å
        if ':' in callback.data:
            m = re.match(r"sell_percent_(\d+)_([A-Za-z0-9]+):(.*)", callback.data)
            if not m:
                await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.")
                return
            percent_raw, token_symbol, amount_str = m.groups()
            address = SOLANA_TOKEN_ADDRESSES.get(token_symbol, token_symbol)
            try:
                sell_amount = float(amount_str)
            except Exception:
                await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
                return
            percent = int(percent_raw)
        else:
            m = re.match(r"sell_percent_(\d+|custom)_(.+)", callback.data)
            if not m:
                await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.")
                return
            percent_raw, token_symbol = m.groups()
            address = SOLANA_TOKEN_ADDRESSES.get(token_symbol, token_symbol)
            amount = await solana.get_token_balance(wallet['public_key'], address)
            if not amount or amount == 0:
                await callback.message.answer("‚ùå –ù–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
                return
            # –ï—Å–ª–∏ custom - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            if percent_raw == "custom":
                await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç (–æ—Ç 1 –¥–æ 100), –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: 37")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å FSM –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
                return
            percent = int(percent_raw)
            if percent < 1 or percent > 100:
                await callback.message.answer("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.")
                return
            sell_amount = amount * percent / 100
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        msg = await callback.message.answer(f"‚è≥ –ü—Ä–æ–≤–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–æ–¥–∞–∂–∏ {sell_amount:.6f} {token_symbol} ({percent}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)...")
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
        from config import SOLANA_TOKEN_ADDRESSES
        from services.jupiter_service import JupiterService
        from utils import to_lamports
        jupiter_service = JupiterService()
        address = SOLANA_TOKEN_ADDRESSES.get(token_symbol, token_symbol)
        # –ü–æ–ª—É—á–∞–µ–º decimals —Ç–æ–∫–µ–Ω–∞
        decimals = await jupiter_service.get_token_decimals(address)
        amount_lamports = to_lamports(sell_amount, decimals)
        if amount_lamports < 1:
            await msg.edit_text(f"‚ùóÔ∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ ‚Äî 1 –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ —Ç–æ–∫–µ–Ω–∞ (lamports).\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {sell_amount} {token_symbol}")
            return
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É —á–µ—Ä–µ–∑ Jupiter
        try:
            tx_result = await jupiter_service.execute_sell(
                user_pubkey=wallet['public_key'],
                user_privkey=wallet['private_key'],
                token_address=address,
                amount=amount_lamports
            )
            # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
            solscan_url = None
            tx_status = ""
            # –ï—Å–ª–∏ tx_result ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ Solscan
            if isinstance(tx_result, str) and tx_result.startswith("https://solscan.io/tx/"):
                solscan_url = tx_result
                tx_status = "üü¢ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
            elif isinstance(tx_result, str):
                tx_status = f"üî¥ –û—à–∏–±–∫–∞: {tx_result}"
            else:
                tx_status = f"üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {tx_result}"
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –∏ —Å—É–º–º—É –≤ SOL
            sol_price_usd = await price_service.get_sol_price()
            price = await price_service.get_token_price_jupiter(address, jupiter_service, sol_price_usd)
            sol_amount = None
            if price:
                sol_amount = sell_amount * price / sol_price_usd
            # –¢–µ–∫—Å—Ç
            text_lines = [
                f"<b>–ü—Ä–æ–¥–∞–∂–∞ {sell_amount:.6f} {token_symbol}</b>"
            ]
            if price:
                text_lines.append(f"–¶–µ–Ω–∞: <b>${price:.4f}</b> –∑–∞ 1 {token_symbol}")
            else:
                text_lines.append("–¶–µ–Ω–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            if sol_amount:
                text_lines.append(f"–ü–æ–ª—É—á–µ–Ω–æ: <b>{sol_amount:.6f} SOL</b> (~${sol_amount * sol_price_usd:.2f})")
            text_lines.append(tx_status)
            if solscan_url:
                text_lines.append(f'<a href="{solscan_url}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Solscan</a>')
            text = "\n".join(text_lines)

            # –ö–Ω–æ–ø–∫–∏
            buttons = [
                [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="sell")],
            ]
            if solscan_url:
                buttons.append([InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Solscan", url=solscan_url)])
            buttons.append([InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å", callback_data=f"sell_token_{token_symbol}")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await msg.edit_text(text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)
        except Exception as e:
            await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {str(e)}")
    except Exception as e:
        logger.error(f"Error in process_sell_percent_callback: {e}")
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {str(e)}")
    await callback.answer()

@router.callback_query(F.data.startswith("sell_token_"))
async def process_sell_token_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–∫–µ–Ω–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏."""
    user_id = callback.from_user.id
    try:
        token_symbol = callback.data.replace("sell_token_", "")
        wallet = await firebase.get_user_wallet(user_id)
        if not wallet:
            await callback.message.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
            return
        sol_price_usd = await price_service.get_sol_price()
        from config import SOLANA_TOKEN_ADDRESSES
        from services.jupiter_service import JupiterService
        jupiter_service = JupiterService()
        address = SOLANA_TOKEN_ADDRESSES.get(token_symbol, token_symbol)
        amount = await solana.get_token_balance(wallet['public_key'], address)
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Jupiter –∏–ª–∏ CoinGecko
        price = await price_service.get_token_price_jupiter(address, jupiter_service, sol_price_usd)
        if not price:
            price = await price_service.get_token_price_usd(address)
        try:
            usd_value = float(amount) * float(price) if price else 0
            if usd_value > 1_000_000:  # –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥
                logger.warning(f"[SELL TOKENS] usd_value —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫: amount={amount}, price={price}, usd_value={usd_value}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ usd_value: amount={amount}, price={price}, error={e}")
            usd_value = 0
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            f"<b>–ü—Ä–æ–¥–∞—Ç—å ${token_symbol}</b>\n"
            f"\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{amount} {token_symbol}</b>  (<b>${usd_value:.2f}</b>)\n"
            f"–¶–µ–Ω–∞: <b>${price:.4f}</b> –∑–∞ 1 {token_symbol}" if price else "–¶–µ–Ω–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö" 
            f"\n"
            f"\n<i>–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é —á–∞—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–¥–∞—Ç—å:</i>"
        )
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è 100%
        percent_buttons = []
        for percent in [25, 50, 75, 100]:
            if percent == 100:
                callback_data = f"sell_percent_{percent}_{token_symbol}:{amount}"
            else:
                callback_data = f"sell_percent_{percent}_{token_symbol}"
            percent_buttons.append(InlineKeyboardButton(text=f"{percent}%", callback_data=callback_data))
        buttons = [
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="sell")],
            [InlineKeyboardButton(text="‚ü≥ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"sell_token_{token_symbol}")],
            percent_buttons,
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å X% ‚úçÔ∏è", callback_data=f"sell_percent_custom_{token_symbol}")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error in process_sell_token_callback: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ.")
    await callback.answer()

@router.callback_query(F.data == "sell")
async def process_sell_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–¥–∞—Ç—å. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π."""
    user_id = callback.from_user.id
    try:
        wallet = await firebase.get_user_wallet(user_id)
        if not wallet:
            await callback.message.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
            return
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω—ã —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º —á–µ—Ä–µ–∑ SolanaService (mint: amount)
        try:
            tokens_raw = await solana.get_wallet_tokens(wallet['public_key'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback.answer()
            return

        if not tokens_raw:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
            await callback.answer()
            return

        sol_price_usd = 0.0
        try:
            sol_price_usd = await price_service.get_sol_price()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã SOL: {e}")

        from config import SOLANA_TOKEN_ADDRESSES
        mint_to_ticker = {v: k for k, v in SOLANA_TOKEN_ADDRESSES.items()}
        import asyncio
        from services.jupiter_service import JupiterService
        jupiter_service = JupiterService()
        async def get_usd(mint, amount):
            ticker = mint_to_ticker.get(mint, mint[:6])
            if ticker == 'SOL':
                return sol_price_usd, float(amount) * sol_price_usd
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —á–µ—Ä–µ–∑ Jupiter
            price_jup = None
            try:
                logger.debug(f"[SELL TOKENS][get_usd] mint={mint}, amount={amount} ‚Äî –≤—ã–∑–æ–≤ get_token_price_jupiter")
                price_jup = await price_service.get_token_price_jupiter(mint, jupiter_service, sol_price_usd)
                logger.debug(f"[SELL TOKENS][get_usd] mint={mint}, amount={amount} ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç get_token_price_jupiter: {price_jup} (type={type(price_jup)})")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ Jupiter –¥–ª—è {mint}: {e}")
            if price_jup:
                return price_jup, float(amount) * price_jup
            # Fallback ‚Äî CoinGecko
            price_cg = None
            try:
                price_cg = await price_service.get_token_price_usd(mint)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ CoinGecko –¥–ª—è {mint}: {e}")
            if price_cg:
                return price_cg, float(amount) * price_cg
            return None, None
        try:
            tasks = [get_usd(mint, amount['amount'] if isinstance(amount, dict) else amount) for mint, amount in tokens_raw.items()]
            usd_results = await asyncio.gather(*tasks)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback.answer()
            return
        DECIMALS_OVERRIDE = {
            'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v': 6,  # USDC
            'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB': 6,  # USDT
            '4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R': 6,  # RAY
            '7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs': 8,  # ETH (Wormhole)
            'orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE': 6,  # ORCA
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ mint –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
        tokens = []
        from utils import from_lamports
        for idx, (mint, amount) in enumerate(tokens_raw.items()):
            amount_val = amount['amount'] if isinstance(amount, dict) else amount
            price, _ = usd_results[idx]
            logger.debug(f"[SELL TOKENS] get_usd –¥–ª—è mint={mint}, amount={amount_val}: price={price} (type={type(price)})")
            ticker = mint_to_ticker.get(mint, mint[:6])
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if isinstance(price, dict):
                logger.error(f"[SELL TOKENS] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: price={price} (type={type(price)}), mint={mint}, amount={amount}")
                price = None
            try:
                if mint in DECIMALS_OVERRIDE:
                    decimals = DECIMALS_OVERRIDE[mint]
                else:
                    decimals = await jupiter_service.get_token_decimals(mint)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è decimals –¥–ª—è {mint}: {e}")
                decimals = 9
            try:
                amount_val = amount['amount'] if isinstance(amount, dict) else amount
                amount_display = from_lamports(int(amount_val), decimals)
                logger.debug(f"[SELL TOKENS] {ticker} mint={mint} amount={amount_val} decimals={decimals} display={amount_display}")
            except Exception as e:
                logger.error(f"[SELL TOKENS] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞: {e}")
                amount_display = amount
            try:
                usd = float(amount_display) * float(price) if price else 0
            except Exception as e:
                logger.error(f"[SELL TOKENS] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ usd –¥–ª—è {ticker}: {e}")
                usd = 0
            tokens.append({
                "symbol": ticker,
                "amount": amount_display,
                "usd": usd,
                "price": price,
                "mint": mint
            })
        if not tokens:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
            await callback.answer()
            return
        # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å SOL –æ—Ç–¥–µ–ª—å–Ω–æ
        sol_balance = 0.0
        try:
            sol_balance = await solana.get_sol_balance(wallet['public_key'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ SOL: {e}")
        text = (
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ 1/{len(tokens)}</b>\n"
            f"<b>–ë–∞–ª–∞–Ω—Å:</b> <b>{sol_balance}</b> SOL (<b>${float(sol_balance)*sol_price_usd:.2f}</b>)\n"
            "\n"
        )
        for t in tokens:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ usd –∏ price
            if isinstance(t['usd'], dict) or not isinstance(t['usd'], (float, int)):
                logger.error(f"[SELL TOKENS] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π usd –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {t['symbol']}: {t['usd']} (type={type(t['usd'])})")
                usd_str = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            else:
                usd_str = f"${t['usd']:.2f}"
            if isinstance(t['price'], dict) or not isinstance(t['price'], (float, int)):
                logger.error(f"[SELL TOKENS] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π price –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {t['symbol']}: {t['price']} (type={type(t['price'])})")
                price_str = ""
            else:
                price_str = f"@ ${t['price']:.4f}"
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å —É—á–µ—Ç–æ–º decimals (–¥–æ 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, –µ—Å–ª–∏ –º–∞–ª–æ)
            try:
                mint = t.get('mint', '')
                if mint and len(mint) > 20:
                    decimals = await jupiter_service.get_token_decimals(mint)
                else:
                    decimals = 9
            except Exception:
                decimals = 9
            try:
                from utils import format_token_amount
                amount_str = format_token_amount(t['amount'], decimals)
            except Exception:
                amount_str = str(t['amount'])
            text += (
                f"üí∞ <b>{t['symbol']}</b>\n"
                f"    ‚îî <b>{amount_str}</b>   (<b>{usd_str}</b>)  {price_str}\n"
            )
        text += "\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞, –ª–∏–±–æ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫.</i>"
        await callback.message.answer(text, reply_markup=get_tokens_keyboard(tokens), parse_mode="HTML")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {[t['symbol'] for t in tokens]}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_sell_callback: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()


from aiogram.types import Message

from handlers.withdraw import cmd_withdraw_with_user_id

@router.callback_query(F.data == "withdraw")
async def process_withdraw_callback(callback: CallbackQuery, state=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –í—ã–≤–µ—Å—Ç–∏ ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–≤–æ–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º user_id"""
    message = callback.message
    if state is None:
        from aiogram.fsm.context import FSMContext
        state = FSMContext(callback.bot, callback.from_user.id, callback.chat_instance)
    await cmd_withdraw_with_user_id(message, state, callback.from_user.id)
    await callback.answer()

@router.callback_query(F.data == "export_keys")
async def process_export_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–≠–∫—Å–ø–æ—Ä—Ç –∫–ª—é—á–µ–π' ‚Äî —Ç–µ–ø–µ—Ä—å –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ /export_keys: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    try:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_export"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_export")
                ]
            ]
        )
        await callback.message.answer(
            "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!\n\n"
            "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–Ω–∏—Ç–µ:\n\n"
            "1. –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
            "2. –•—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ\n"
            "3. –õ—é–±–æ–π, –∫—Ç–æ –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–ª—é—á—É, –ø–æ–ª—É—á–∏—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –∫–æ—à–µ–ª—å–∫–æ–º\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=keyboard
        )
        from handlers.export_keys import ExportStates
        await state.set_state(ExportStates.waiting_for_confirmation)
        logger.info(f"User {callback.from_user.id} initiated export keys via button")
    except Exception as e:
        logger.error(f"Error in export keys callback: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∫–ª—é—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

@router.callback_query(F.data == "balance")
async def process_balance_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ë–∞–ª–∞–Ω—Å"""
    user_id = callback.from_user.id
    try:
        wallet = await firebase.get_user_wallet(user_id)
        if wallet:
            balances = await solana.get_all_balances(wallet['public_key'])
            sol_price_usd = await price_service.get_sol_price()
            
            text = f"üí∞ –ë–∞–ª–∞–Ω—Å—ã:\n"
            for token, balance in balances.items():
                if token == 'SOL':
                    usd_value = float(balance) * sol_price_usd
                    text += f"- {token}: {balance} (~${usd_value:.2f})\n"
                else:
                    text += f"- {token}: {balance}\n"
            
            await callback.message.answer(text)
        else:
            await callback.message.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"Error in balance check for user {user_id}: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
    await callback.answer()

@router.callback_query(F.data == "refresh")
async def process_refresh_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û–±–Ω–æ–≤–∏—Ç—å"""
    user_id = callback.from_user.id
    try:
        wallet = await firebase.get_user_wallet(user_id)
        if not wallet:
            await callback.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        balances = await solana.get_all_balances(wallet['public_key'])
        sol_price_usd = await price_service.get_sol_price()
        
        text = (
            f"üëá –í–∞—à –∫–æ—à–µ–ª–µ–∫:\n"
            f"`{wallet['public_key']}`\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å—ã:\n"
        )
        
        for token, balance in balances.items():
            if token == 'SOL':
                usd_value = float(balance) * sol_price_usd
                text += f"- {token}: {balance} (~${usd_value:.2f})\n"
            else:
                text += f"- {token}: {balance}\n"
        
        text += "\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å."
        
        await callback.message.edit_text(
            text,
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer("‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"Error in refresh for user {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
