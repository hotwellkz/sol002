import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from dotenv import load_dotenv
from services.jupiter_service import JupiterService
from services.solana_client import solana_client
from loguru import logger
import aiohttp
import json
import base58
from solana.keypair import Keypair
from solana.publickey import PublicKey
from solana.rpc.types import TxOpts
from solana.transaction import Transaction
import asyncio
from typing import Optional, Dict, Any

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
jupiter_service = JupiterService()

class SwapStates(StatesGroup):
    waiting_for_token = State()
    waiting_for_amount = State()

async def send_telegram_message(chat_id: int, text: str, parse_mode: Optional[str] = None) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    max_retries = 3
    for attempt in range(max_retries):
        try:
            await bot.send_message(chat_id, text, parse_mode=parse_mode)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {str(e)}")
            if attempt < max_retries - 1:
                await asyncio.sleep(2)
                continue
            return False

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await send_telegram_message(
            message.chat.id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–≤–æ–ø–∞ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ Jupiter.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /swap –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–≤–æ–ø–∞."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {str(e)}")

@dp.message(Command("swap"))
async def cmd_swap(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /swap"""
    try:
        await state.set_state(SwapStates.waiting_for_token)
        await send_telegram_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_swap: {str(e)}")

@dp.message(SwapStates.waiting_for_token)
async def process_token(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞"""
    try:
        token_address = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
        try:
            PublicKey(token_address)
        except:
            await send_telegram_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
            
        await state.update_data(token_address=token_address)
        await state.set_state(SwapStates.waiting_for_amount)
        await send_telegram_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –¥–ª—è —Å–≤–æ–ø–∞:"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_token: {str(e)}")
        await state.clear()

@dp.message(SwapStates.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ SOL"""
    try:
        amount = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        try:
            amount = float(amount)
            if amount <= 0:
                raise ValueError
        except:
            await send_telegram_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:"
            )
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
        data = await state.get_data()
        token_address = data.get("token_address")
        
        if not token_address:
            await send_telegram_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞: –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /swap"
            )
            await state.clear()
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ .env
        private_key = os.getenv("WALLET_PRIVATE_KEY")
        if not private_key:
            await send_telegram_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env"
            )
            await state.clear()
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ
        keypair = Keypair.from_secret_key(base58.b58decode(private_key))
        public_key = str(keypair.public_key)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–æ–ø
        await send_telegram_message(
            message.chat.id,
            "üîÑ –í—ã–ø–æ–ª–Ω—è—é —Å–≤–æ–ø..."
        )
        
        try:
            signature = await jupiter_service.perform_swap(
                token_out_address=token_address,
                amount=str(int(amount * 1e9)),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ lamports
                user_wallet_address=public_key,
                user_private_key=private_key
            )
            
            solscan_url = f"https://solscan.io/tx/{signature}"
            await send_telegram_message(
                message.chat.id,
                f"‚úÖ –°–≤–æ–ø —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
                f"–ü–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {signature}\n"
                f"–°—Å—ã–ª–∫–∞: {solscan_url}"
            )
            
        except Exception as e:
            await send_telegram_message(
                message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–≤–æ–ø–∞: {str(e)}"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_amount: {str(e)}")
    finally:
        await state.clear()

async def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")

if __name__ == '__main__':
    asyncio.run(main()) 